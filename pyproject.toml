[project]
name = "wazuh-dfn"
version = "0.17.0"
authors = [{ name = "Sebastian Wolf", email = "wolf@uni-trier.de" }]
description = "Wazuh DFN"
readme = "README.md"
license.file = "LICENSE"
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Environment :: Console",
    "License :: OSI Approved :: GNU Affero General Public License v3 or later (AGPLv3+)",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3 :: Only",
    "Programming Language :: Python :: 3.12",
]
requires-python = ">=3.12"
dependencies = [
    # Core dependencies with version ranges for better compatibility
    "psutil>=7.0.0,<8.0.0",           # System monitoring utilities
    "PyYAML>=6.0,<7.0.0",             # YAML configuration
    "python-dotenv>=1.0.0,<2.0.0",    # Environment variable loading
    "cryptography>=44.0.0,<45.0.0",   # Cryptographic operations for SSL/TLS
    "pydantic>=2.0.0",                # Pydantic for data validation
    "tomli;python_version<'3.11'",    # TOML parsing for Python < 3.11
    "zipp>=3.19.1",                   # ZIP file import support
    # New dependencies for asyncio implementation
    "aiofiles>=24.0.0,<25.0.0",         # Async file I/O operations
    "aiokafka>=0.12.0,<1.0.0",         # Async Kafka client (replacing confluent-kafka)
]

[project.urls]
Documentation = "https://github.com/ZIMK/wazuh-dfn"
Source = "https://github.com/ZIMK/wazuh-dfn"
Tracker = "https://github.com/ZIMK/wazuh-dfn/-/issues"

[project.scripts]
wazuh-dfn = "wazuh_dfn.main:main"

[build-system]
requires = ["pdm-backend"]
build-backend = "pdm.backend"

[tool.pdm]

[tool.pdm.dev-dependencies]
test = [
    "pytest>=8.0.0,<9.0.0",
    "pytest-cov>=6.0.0,<7.0.0",
    "pytest-sugar>=1.0.0,<2.0.0",
    "pytest-mock>=3.0.0,<4.0.0",
    "hypothesis>=6.0.0,<7.0.0",
    "pytest-asyncio>=0.26.0,<1.0.0",  # Support for testing async code
    "coverage[toml]>=7.8.0,<8.0.0",    # Test coverage reporting
    "termcolor>=3.0.0,<4.0.0",         # Terminal color output formatting
]
lint = [
    "black>=25.0.0,<26.0.0",
    "ruff>=0.9.0,<1.0.0",
    "pyright>=1.1.350,<2.0.0",
]
types = [
    "types-PyYAML",                    # For YAML configuration loading
    "types-psutil",                    # For system monitoring utilities
    "types-aiofiles",                  # For async file I/O typing
]

[tool.ruff]
line-length = 120
target-version = "py312"
fix = true
unsafe-fixes = false
exclude = [".git", ".venv", "venv", "__pycache__", "build", "dist"]

[tool.ruff.lint]
unfixable = [
    "ERA", # do not autoremove commented out code
]

# Core rules focused on important issues
select = [
    "E",   # pycodestyle errors
    "F",   # pyflakes
    "I",   # isort
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions (reduced scope)
    "W",   # pycodestyle warnings
    "N",   # pep8-naming
    "UP",  # pyupgrade
    "RUF", # ruff-specific rules
    "S",   # flake8-bandit (security)
    "PTH", # flake8-use-pathlib
]

# Optional rules that can be enabled later or for specific modules
extend-select = [
    "PL",  # pylint
    "D",   # pydocstyle
    "TID", # flake8-tidy-imports
    "ERA", # eradicate (commented out code)
    "PGH", # pygrep-hooks
    "SLF", # flake8-self
    "SIM", # flake8-simplify
]

ignore = [
    "D203",    # one-blank-line-before-class
    "D212",    # multi-line-summary-first-line
    "D100",    # Missing docstring in public module
    "D101",    # Missing docstring in public class
    "D102",    # missing docstring in public method
    "D105",    # missing docstring in magic method
    "D107",    # missing docstring in __init__
    "D205",    # blank line after summary
    "B904",    # Within except clause, raise with from
    "PLR0913", # too many arguments
    "PLR0915", # Too many statements
    "RUF012",  # ClassVar typing
    "RUF013",  # Optional typing style
    "SIM108",  # Ternary operators
    "SLF001",  # Private member access
    "PLR2004", # Magic numbers
    "ERA001",  # Commented code
    "C403",    # List vs set comprehension
    "UP038",   # isinstance tuple syntax
    "D417",    # Missing argument descriptions
    "SIM102",  # Nested if statements - can be more readable
]

[tool.ruff.lint.per-file-ignores]
"tests/**/*" = ["S101", "D", "PGH"]
"**/__init__.py" = [
    "I001",
    "I002",
] # Disable import sorting in all __init__.py files

[tool.ruff.lint.mccabe]
max-complexity = 12 # Increased from 10 to be more practical

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.ruff.lint.isort]
# Prevent import sorting to preserve carefully ordered imports
no-sections = true
force-sort-within-sections = false
combine-as-imports = false
split-on-trailing-comma = false
required-imports = []

[tool.black]
line-length = 120
target-version = ['py312']
preview = true # Enable new formatting features
include = '\.pyi?$'
extend-exclude = '''
# A regex preceded with ^/ will apply only to files and directories
# in the root of the project.
^/tests/data/
'''

[tool.isort]
profile = "black"
line_length = 120

[tool.pyright]
pythonVersion = "3.12"
include = ["src"]
exclude = ["**/node_modules", "**/__pycache__"]
typeCheckingMode = "standard"
reportMissingImports = true
reportMissingTypeStubs = false
reportUnknownMemberType = false
reportUnknownVariableType = false
reportUnknownArgumentType = false
reportGeneralTypeIssues = true
reportFunctionMemberAccess = "none"
reportPrivateImportUsage = false
reportOptionalMemberAccess = false
reportOptionalSubscript = false
reportOptionalCall = false
reportOptionalIterable = false
reportOptionalContextManager = false
reportOptionalOperand = false
reportUntypedFunctionDecorator = false
useLibraryCodeForTypes = true
reportMissingParameterType = false
reportUnknownParameterType = false
reportMissingReturn = false
reportIncompatibleMethodOverride = "warning"
reportImportCycles = "warning"

[tool.coverage.run]
branch = true
source = ["src/wazuh_dfn"]
omit = ["tests/*", "*/test_*.py"]
relative_files = true
dynamic_context = "test_function"
parallel = true

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "pass",
    "raise ImportError",
    "@abstractmethod",
    "@overload",
]
fail_under = 80
show_missing = true
skip_covered = true
sort = "Cover"

[tool.pytest.ini_options]
minversion = "7.0"
addopts = """
    --cov=src/wazuh_dfn 
    --cov-report=term-missing 
    --cov-report=xml:coverage.xml 
    --cov-report=html 
    --cov-fail-under=80
    --junitxml=test-results.xml 
    --strict-markers
    --strict-config
    --cache-clear
    -v
    -ra
    --tb=short
    --cov-branch
    --no-cov-on-fail
    -m 'not performance'
"""
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
xfail_strict = true
asyncio_default_fixture_loop_scope = "function"
filterwarnings = [
    "default",
    "ignore::DeprecationWarning",
    "ignore::UserWarning",
]
markers = [
    "performance(threshold, description): marks tests as performance tests with threshold and description parameters",
]
